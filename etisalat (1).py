# -*- coding: utf-8 -*-
"""etisalat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17iuiRVzKLZvQXN9p4p4GdfJznEog191g

**Problem:** The Sales Data Sample
The provided data represents information from a marketing campaign. We you provided information
about the product in the campaign/offer that was send to a specific customer and the convergence
result of this campaign (label attribute).

#Importing libraries
"""

!pip install webcolors

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import webcolors
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from scipy.spatial import KDTree
from webcolors import CSS3_HEX_TO_NAMES, hex_to_rgb
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix, classification_report
import matplotlib.pyplot as plt
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense, Activation, Flatten, Conv1D, MaxPool1D, MaxPooling1D, Dropout
from keras.optimizers import SGD, Adam
from keras.callbacks import EarlyStopping
import datetime
import calendar
from imblearn.over_sampling import SMOTE
import xgboost as xgb
from sklearn.tree import DecisionTreeClassifier
from imblearn.over_sampling import RandomOverSampler
from sklearn.metrics import confusion_matrix
import itertools

"""#Reading data"""

df = pd.read_csv('rokeplay.csv')

df.head(40)

"""#Preprocessing

##Checking column names, Null values, dataframe shape
"""

print(df.shape)
print(df.columns)
print(df.info())
print(df.isnull().sum())
#print(df.isna().sum())
df.dropna(inplace=True)

"""##Feature Engineering

###RGB parsing
"""

def rgb_to_name(rgb_tuple):
    
    # a dictionary of all the hex and their respective names in css3
    css3_db = CSS3_HEX_TO_NAMES

    names = []
    rgb_values = []
    for color_hex, color_name in css3_db.items():
        names.append(color_name)
        rgb_values.append(hex_to_rgb(color_hex))
    
    kdt_db = KDTree(rgb_values)
    distance, index = kdt_db.query(rgb_tuple)
    return f'{names[index]}'

df['primary_color'] = df.apply(lambda row: rgb_to_name(tuple([row['rgb_r_main_col'], row['rgb_g_main_col'], row['rgb_b_main_col']])), axis=1)
df['secondary_color'] = df.apply(lambda row: rgb_to_name(tuple([row['rgb_r_sec_col'], row['rgb_g_sec_col'], row['rgb_b_sec_col']])), axis=1)

"""###Retail-week parsing"""

df['year'] = df.retailweek.apply(lambda x: int(x.split('-')[0]))
df['month'] = df.retailweek.apply(lambda x: int(x.split('-')[1]))
df['day'] = df.retailweek.apply(lambda x: int(x.split('-')[2]))

"""###Date-time parsing"""

def week_num(year, month, day):
  date = datetime.date(year, month, day)
  weekn = date.isocalendar().week
  return weekn

df['week_number'] = df.retailweek.apply(lambda x: week_num(int(x.split('-')[0]),int(x.split('-')[1]),int(x.split('-')[2])))

"""###Total sales calculation"""

df['total_sales'] = df.apply(lambda row: row['sales'] * row['current_price'], axis=1)
df['total_sales_p1_0'] = df.apply(lambda row: row['sales'] * row['current_price'] if row['promo1'] == 0 else 0, axis=1)
df['total_sales_p1_1'] = df.apply(lambda row: row['sales'] * row['current_price'] if row['promo1'] == 1 else 0, axis=1)
df['total_sales_p2_0'] = df.apply(lambda row: row['sales'] * row['current_price'] if row['promo2'] == 0 else 0, axis=1)
df['total_sales_p2_1'] = df.apply(lambda row: row['sales'] * row['current_price'] if row['promo2'] == 1 else 0, axis=1)

"""#Exploratory Data Analysis (EDA)"""

df2 = df.copy()

df2 = df2.drop(['regular_price','ratio','article','sales','customer_id','rgb_r_main_col','rgb_g_main_col','rgb_b_main_col','rgb_r_sec_col','rgb_g_sec_col','rgb_b_sec_col'],axis=1)

def scatter(df2,col):
  plt.figure(figsize=(10,10))
  plt.scatter(df2[col], df2['total_sales'], color='turquoise')
  plt.ylabel('Weekly Sales')
  plt.xlabel(col)

"""##Pie charts"""

pie_chart = df[['year', 'productgroup', 'category','gender']]

for i in pie_chart.columns:
  plt.figure(figsize=(4,4))
  plt.title('Total Percentage of '+i, fontsize=18)
  plt.pie(df2[i].value_counts()/len(df2),labels=df2[i].unique(),autopct='%1.1f%%')
  plt.show()

"""##Line graphs"""

weekly_sales_2014 = df2[df2.year==2014]['total_sales'].groupby(df2['week_number']).mean()
weekly_sales_2015 = df2[df2.year==2015]['total_sales'].groupby(df2['week_number']).mean()
weekly_sales_2016 = df2[df2.year==2016]['total_sales'].groupby(df2['week_number']).mean()
weekly_sales_2017 = df2[df2.year==2017]['total_sales'].groupby(df2['week_number']).mean()
plt.figure(figsize=(20,8))
sns.lineplot(x = weekly_sales_2014.index, y = weekly_sales_2014.values)
sns.lineplot(x = weekly_sales_2015.index, y = weekly_sales_2015.values)
sns.lineplot(x = weekly_sales_2016.index, y =  weekly_sales_2016.values)
sns.lineplot(x = weekly_sales_2017.index, y = weekly_sales_2017.values)
plt.grid()
plt.xticks(np.arange(1, 53, step=1))
plt.legend(['2014', '2015', '2016','2017'], loc='best', fontsize=16)
plt.title('Average Weekly Sales - Per Year', fontsize=18)
plt.ylabel('Sales', fontsize=16)
plt.xlabel('Week', fontsize=16)
plt.show()

german_sales = df2[df2.country=='Germany']['total_sales'].groupby(df2['week_number']).mean()
austrian_sales = df2[df2.country=='Austria']['total_sales'].groupby(df2['week_number']).mean()
french_sales = df2[df2.country=='France']['total_sales'].groupby(df2['week_number']).mean()
    
plt.figure(figsize=(20,8))
sns.lineplot(x = german_sales.index, y = german_sales.values)
sns.lineplot(x = austrian_sales.index, y = austrian_sales.values)
sns.lineplot(x = french_sales.index, y =  french_sales.values)
plt.grid()
plt.xticks(np.arange(1, 53, step=1))
plt.legend(['Germany', 'Austria', 'France'], loc='best', fontsize=16)
plt.title('Average Weekly Sales - Per Country', fontsize=18)
plt.ylabel('Sales', fontsize=16)
plt.xlabel('Week', fontsize=16)
plt.show()

german_sales_p1 = df[df.country=='Germany']['total_sales_p1_1'].groupby(df['week_number']).mean()
austrian_sales_p1 = df[df.country=='Austria']['total_sales_p1_1'].groupby(df['week_number']).mean()
french_sales_p1 = df[df.country=='France']['total_sales_p1_1'].groupby(df['week_number']).mean()
    
plt.figure(figsize=(20,8))
sns.lineplot(x = german_sales_p1.index, y = german_sales_p1.values)
sns.lineplot(x = austrian_sales_p1.index, y = austrian_sales_p1.values)
sns.lineplot(x = french_sales_p1.index, y =  french_sales_p1.values)
plt.grid()
plt.xticks(np.arange(1, 53, step=1))
plt.legend(['Germany', 'Austria', 'France'], loc='best', fontsize=16)
plt.title('Average Weekly Sales - Per Country', fontsize=18)
plt.ylabel('Sales', fontsize=16)
plt.xlabel('Week', fontsize=16)
plt.show()

# orange no promo, Blue promo, green TOTAL
withpromo1 = df[df.country=='Germany']['total_sales_p1_1'].groupby(df['week_number']).mean()
nopromo1 = df[df.country=='Germany']['total_sales_p1_0'].groupby(df['week_number']).mean()
totalwithpromo1 = df[df.country=='Germany']['total_sales'].groupby(df['week_number']).mean()
    
plt.figure(figsize=(20,8))
sns.lineplot(x = withpromo1.index, y = withpromo1.values)
sns.lineplot(x = nopromo1.index, y = nopromo1.values)
sns.lineplot(x = totalwithpromo1.index, y =  totalwithpromo1.values)
plt.grid()
plt.xticks(np.arange(1, 53, step=1))
plt.legend(['promo', 'nopromo', 'total'], loc='best', fontsize=16)
plt.title('Average Weekly Sales - Per Country', fontsize=18)
plt.ylabel('Sales', fontsize=16)
plt.xlabel('Week', fontsize=16)
plt.show()

# orange no promo, Blue promo, green TOTAL

withpromo1 = df[df.country=='Austria']['total_sales_p1_1'].groupby(df['week_number']).mean()
nopromo1 = df[df.country=='Austria']['total_sales_p1_0'].groupby(df['week_number']).mean()
totalwithpromo1 = df[df.country=='Austria']['total_sales'].groupby(df['week_number']).mean()
    
plt.figure(figsize=(20,8))
sns.lineplot(x = withpromo1.index, y = withpromo1.values)
sns.lineplot(x = nopromo1.index, y = nopromo1.values)
sns.lineplot(x = totalwithpromo1.index, y =  totalwithpromo1.values)
plt.grid()
plt.xticks(np.arange(1, 53, step=1))
plt.legend(['promo', 'nopromo', 'total'], loc='best', fontsize=16)
plt.title('Average Weekly Sales - Per Country', fontsize=18)
plt.ylabel('Sales', fontsize=16)
plt.xlabel('Week', fontsize=16)
plt.show()

# orange no promo, Blue promo, green TOTAL

withpromo1 = df[df.country=='France']['total_sales_p1_1'].groupby(df['week_number']).mean()
nopromo1 = df[df.country=='France']['total_sales_p1_0'].groupby(df['week_number']).mean()
totalwithpromo1 = df[df.country=='France']['total_sales'].groupby(df['week_number']).mean()
    
plt.figure(figsize=(20,8))
sns.lineplot(x = withpromo1.index, y = withpromo1.values)
sns.lineplot(x = nopromo1.index, y = nopromo1.values)
sns.lineplot(x = totalwithpromo1.index, y =  totalwithpromo1.values)
plt.grid()
plt.xticks(np.arange(1, 53, step=1))
plt.legend(['promo', 'nopromo', 'total'], loc='best', fontsize=16)
plt.title('Average Weekly Sales - Per Country', fontsize=18)
plt.ylabel('Sales', fontsize=16)
plt.xlabel('Week', fontsize=16)
plt.show()

weekly_sales_mean = df2['total_sales'].groupby(df2['week_number']).mean()
weekly_sales_median = df2['total_sales'].groupby(df2['week_number']).median()
plt.figure(figsize=(20,8))
sns.lineplot(x = weekly_sales_mean.index, y = weekly_sales_mean.values)
sns.lineplot(x = weekly_sales_median.index, y = weekly_sales_median.values)

plt.grid()
plt.legend(['Mean', 'Median'], loc='best', fontsize=16)
plt.title('Weekly sales - Mean and Median', fontsize=18)
plt.ylabel('Sales', fontsize=16)
plt.xlabel('Date', fontsize=16)
plt.show()

promo1_sales = df['total_sales_p1_1'].groupby(df['promo1']).mean()
promo2_sales = df['total_sales_p1_0'].groupby(df['promo1']).mean()
plt.figure(figsize=(20,8))
sns.lineplot(x = promo1_sales.index, y = promo1_sales.values)
sns.lineplot(x = promo2_sales.index, y = promo2_sales.values)

plt.grid()
plt.legend(['promo1 activated', 'promo1 not activated'], loc='best', fontsize=16)
plt.title('Weekly sales vs promotions', fontsize=18)
plt.ylabel('Sales', fontsize=16)
plt.xlabel('Promotions', fontsize=16)
plt.show()

cmap = sns.diverging_palette(230, 20, as_cmap=True)
sns.heatmap(df2.corr(), cmap=cmap, vmax=.5, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5})

"""##Continous variables"""

continous_df = df[['total_sales', 'regular_price', 'current_price','ratio', 'promo1', 'promo2','cost','week_number']]

"""###Scatter plot"""

for i in continous_df.columns:
  scatter(continous_df,i)

"""###Histogram"""

for col in continous_df.columns:
    plt.title('Graph for %s: '%(col) ,fontsize=18)
    sns.histplot(df[col])
    plt.show()
    print('\n\n')

"""###Box plot"""

continous_df.boxplot(column='total_sales')

continous_df.boxplot(column=['regular_price','current_price'])

continous_df.boxplot(column='cost')

continous_df.boxplot(column='ratio')

"""##Categorical variables"""

categorical_df = df[['country', 'article', 'retailweek','article.1', 'productgroup', 'category', 'style','sizes','gender']]

"""###Bar chart"""

for i in categorical_df.columns:
  catego_num = categorical_df[i].value_counts()
  plt.title('Graph for %s: total = %d'%(i,len(catego_num)),fontsize=18)
  sns.barplot(x=catego_num.index, y=catego_num)
  plt.show()
  print('\n\n')

for i in categorical_df[['article', 'retailweek']].columns:
  catego_num = categorical_df[i].value_counts()[:20]
  plt.title('Graph for %s: total = %d'%(i,len(catego_num)),fontsize=18)
  sns.barplot(x=catego_num, y=catego_num.index)
  plt.show()
  print('\n\n')

"""###Pivot table"""

pivot_df = df[['country','total_sales', 'regular_price', 'current_price','ratio','category', 'cost', 'style', 'productgroup', 'sizes','gender','primary_color','secondary_color','label']]

pd.pivot_table(pivot_df, index='country', values='total_sales',aggfunc='sum').sort_values('total_sales', ascending=False)

pd.pivot_table(pivot_df, index=['country','gender'], values='total_sales',aggfunc='sum')

pd.pivot_table(pivot_df, index=['sizes','gender'], values='total_sales', aggfunc='sum').sort_values('total_sales', ascending=False)

pd.pivot_table(pivot_df, index=['country','category'], values='total_sales', aggfunc='sum').sort_values('total_sales', ascending=False)

pd.pivot_table(pivot_df, index=['productgroup','category'], values='total_sales').sort_values('total_sales', ascending=False)

"""##Models"""

model_df = df[['country','sales','ratio','week_number','month','gender','current_price','productgroup','category','style','primary_color','secondary_color', 'label']]

cmap = sns.diverging_palette(330, 20, as_cmap=True)
sns.heatmap(model_df.corr(), cmap=cmap, vmax=.5, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5})

"""###Dummy variables"""

df_dummy = pd.get_dummies(model_df)
df_dummy.head(10)

"""###Splitting data and labels"""

x = df_dummy.drop('label',axis=1)
y = df_dummy.label.values

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

"""###Handling unbalanced dataset"""

print("Before OverSampling, counts of label '1': {}".format(sum(y_train == 1)))
print("Before OverSampling, counts of label '0': {} \n".format(sum(y_train == 0)))

sm = SMOTE(random_state = 2)
X_train_res, y_train_res = sm.fit_resample(X_train, y_train.ravel())

print("After OverSampling, counts of label '1': {}".format(sum(y_train_res == 1)))
print("After OverSampling, counts of label '0': {}".format(sum(y_train_res == 0)))

"""###Machine Learnig Approach

####Linear Regression
"""

logistic = LogisticRegression()
logistic.fit(X_train_res,y_train_res)

"""####Decision Tree

"""

decision_t = DecisionTreeClassifier()
decision_t.fit(X_train_res,y_train_res)

"""####Random Forest"""

random_f = RandomForestClassifier()
random_f.fit(X_train_res,y_train_res)

"""####Support Vector Machine"""

from sklearn.model_selection import GridSearchCV

svc=SVC() 
parameters = [ {'C':[1, 10, 100], 'kernel':['linear']},
               {'C':[1, 10, 100], 'kernel':['rbf'], 'gamma':[0.1, 0.2, 0.3]},
               {'C':[1, 10, 100], 'kernel':['poly'], 'degree': [2,3,4] ,'gamma':[0.01,0.02,0.03]} 
              ]

grid_search = GridSearchCV(estimator = svc,  
                           param_grid = parameters,
                           scoring = 'accuracy',
                           cv = 2,
                           verbose=1)

#grid_search.fit(X_train, y_train)

'''
print('GridSearch CV best score : {:.4f}\n\n'.format(grid_search.best_score_))

print('Parameters that give the best results :','\n\n', (grid_search.best_params_))

print('\n\nEstimator that was chosen by the search :','\n\n', (grid_search.best_estimator_))
'''

"""###Neural Network Approach (Just for fun)"""

classifier = Sequential()


classifier.add(Dense(8, activation='relu'))

classifier.add(Dense(4, activation='relu'))

classifier.add(Dense(1, activation='sigmoid'))

classifier.compile( loss = tf.keras.losses.BinaryCrossentropy(),
              optimizer = Adam(),
              metrics = ['accuracy'])
history = classifier.fit(X_train_res, y_train_res, epochs = 50, batch_size = 64, validation_data=(X_test, y_test), callbacks = [EarlyStopping(monitor = 'val_loss', patience = 2)])

"""##Evaluation

###Traditoinal Machine Learning Models
"""

pred_1 = logistic.predict(X_test)
pred_2 = decision_t.predict(X_test)
pred_3 = random_f.predict(X_test)

print('\n\t  Classification report for logestic regression \n'+classification_report(y_test, pred_1))
print('\n\t  Classification report for decision tree  \n'+classification_report(y_test, pred_2))
print('\n\t  Classification report for random forest  \n'+classification_report(y_test, pred_3))

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
  
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes)
    plt.yticks(tick_marks, classes)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]

    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

confusion_mtx = confusion_matrix(y_test, pred_1) 
plot_confusion_matrix(confusion_mtx, classes = range(2))

"""###Neural Network"""

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()